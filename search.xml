<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[session解析]]></title>
    <url>%2F2018%2F07%2F09%2Fsession%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[session是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个完整的事务，能使网站变成一个真正意义上的软件。 创建： sessionid第一次产生是在直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建。 删除： 超时；程序调用HttpSession.invalidate()；程序关闭； session存放在哪里： 服务器端的内存中。不过session可以通过特殊的方式做持久化管理（memcache，redis）。 session的id是从哪里来的，sessionID是如何使用的： 当客户端第一次请求session对象时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象 session会因为浏览器的关闭而删除吗？不会，session只会通过上面提到的方式去关闭。 下面是tomcat中session的创建：ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法：（tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的），StandardManager类是tomcat容器里默认的session管理实现类，它会将session的信息存储到web容器所在服务器的内存里。PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大，对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。]]></content>
      <categories>
        <category>分类</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下写shell脚本到Linux下执行遇到的问题及解决方案]]></title>
    <url>%2F2018%2F07%2F03%2FWindows%E4%B8%8B%E5%86%99shell%E8%84%9A%E6%9C%AC%E5%88%B0Linux%E4%B8%8B%E6%89%A7%E8%A1%8C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[在Windows下写个Shell脚本再到Linux下执行，会出现权限不足和格式问题。解决方案 1、权限不足进入lyn.sh文件的存放目录下，利用chmod 777 lyn.sh修改权限。 执行过程中报错，并无法正确执行。因为从Windows下到Linux中文件格式问题。通过vi进入该文件，利用命令:set ff查看文件格式，得到结果fileformat=dos，利用命令:set ff=unix修改文件格式，修改成功后再次查看文件格式，形如：fileformat=unix，这次再执行就可以了。]]></content>
      <categories>
        <category>分类</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于JWT(Json Web Token)的授权方式]]></title>
    <url>%2F2018%2F06%2F13%2F%E5%9F%BA%E4%BA%8EJWT-Json-Web-Token-%E7%9A%84%E6%8E%88%E6%9D%83%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JWT简介 JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。 JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。 基于session的登录认证 在传统的用户登录认证中，因为http是无状态的，所以都是采用session方式。用户登录成功，服务端会保证一个session，当然会给客户端一个sessionId，客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId。cookie+session这种模式通常是保存在内存中，而且服务从单服务到多服务会面临的session共享问题，随着用户量的增多，开销就会越大。而JWT不是这样的，只需要服务端生成token，客户端保存这个token，每次请求携带这个token，服务端认证解析就可。 JWT生成Token后的样子 123eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmciOiLku4rml6XlpLTmnaEiLCJuYW1lIjoiRnJlZeeggeWGnCIsImV4cCI6MTUxNDM1NjEwMywiaWF0IjoxNTE0MzU2MDQzLCJhZ2UiOiIyOCJ9.49UF72vSkj-sA4aHHiYN5eoZ9Nb4w5Vb45PsLF7x_NY JWT的构成 第一部分我们称它为头部（header),第二部分我们称其为载荷（payload)，第三部分是签证（signature)。 header jwt的头部承载两部分信息： 声明类型，这里是jwt 声明加密的算法 通常直接使用 HMAC SHA256 完整的头部就像下面这样的JSON： 1234567&#123;&quot;typ&quot;: &quot;JWT&quot;,&quot;alg&quot;: &quot;HS256&quot;&#125; 然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分： 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 playload 载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分 标准中注册的声明 公共的声明 私有的声明 标准中注册的声明 (建议但不强制使用) ： 12345678910111213iss: jwt签发者sub: jwt所面向的用户aud: 接收jwt的一方exp: jwt的过期时间，这个过期时间必须要大于签发时间nbf: 定义在什么时间之前，该jwt都是不可用的.iat: jwt的签发时间jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。 公共的声明 ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密. 私有的声明 ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。 定义一个payload： 123456789&#123;&quot;name&quot;:&quot;cool&quot;,&quot;age&quot;:&quot;28&quot;,&quot;org&quot;:&quot;讯飞快读&quot;&#125; 然后将其进行base64加密，得到Jwt的第二部分： 1eyJvcmciOiLku4rml6XlpLTmnaEiLCJuYW1lIjoiRnJlZeeggeWGnCIsImV4cCI6MTUxNDM1NjEwMywiaWF0IjoxNTE0MzU2MDQzLCJhZ2UiOiIyOCJ9 signature jwt的第三部分是一个签证信息，这个签证信息由三部分组成： 12345header (base64后的)payload (base64后的)secret 这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分： 149UF72vSkj-sA4aHHiYN5eoZ9Nb4w5Vb45PsLF7x_NY 密钥secret是保存在服务端的，服务端会根据这个密钥进行生成token和验证，所以需要保护好。 java方式实现 Maven 12345&lt;dependency&gt; &lt;groupId&gt;com.auth0&lt;/groupId&gt; &lt;artifactId&gt;java-jwt&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt; 加密与校验代码： 123456789101112131415161718192021222324252627282930313233343536public class JwtToken &#123; public static String SECRET = &quot;iflytek&quot;; public static String createToken() throws Exception &#123; Date iatDate = new Date(); Calendar newTime = Calendar.getInstance(); newTime.add(Calendar.MINUTE, 60*3); Date expiresDate = newTime.getTime(); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;alg&quot;, &quot;HS256&quot;); map.put(&quot;typ&quot;, &quot;JWT&quot;); String token = JWT.create() .withHeader(map) .withClaim(&quot;name&quot;, &quot;cool&quot;) .withClaim(&quot;org&quot;, &quot;快读&quot;) .withExpiresAt(expiresDate) .withIssuedAt(iatDate) .sign(Algorithm.HMAC256(SECRET)); return token; &#125; public static Map&lt;String, Claim&gt; verifyToken(String token) throws Exception &#123; JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build(); DecodedJWT jwt = null; try &#123; jwt = verifier.verify(token); &#125; catch (Exception e) &#123; throw new RuntimeException(&quot;登录过期，请重新登录&quot;); &#125; return jwt.getClaims(); &#125;&#125; 测试 123456789101112131415public class Test &#123; public static void main(String[] args) throws Exception&#123; String token=JwtToken.createToken(); log.info(token); Map&lt;String, Claim&gt; claimMap=JwtToken.verifyToken(token); log.info(claimMap.get(&quot;name&quot;).asString()); Map&lt;String, Claim&gt; sb=JwtToken.verifyToken(&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmciOiLlv6vor7siLCJuYW1lIjoiY29vbCIsImV4cCI6MTUyODk2NjYxNywiaWF0IjoxNTI4ODgwMjE3fQ.HiQkHzvrcWhOmbfZT4ba5kNf8ePLJiu673f8fKLxrPQ&quot;); &#125;&#125; JWT总结 1、因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。 2、payload部分，JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。 3、便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。它不需要在服务端保存会话信息, 所以它易于应用的扩展]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>鉴权</tag>
        <tag>Token</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深拷贝与浅拷贝]]></title>
    <url>%2F2018%2F06%2F12%2F%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[在java语言中，有几种方式可以创建对象呢？ 1 使用new操作符创建一个对象2 使用clone方法复制一个对象 那么这两种方式有什么相同和不同呢？ new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。 深复制和浅复制 [TOC] 定义 浅复制：只复制一个对象，对象内部存在的指向其他对象数组或者引用则不复制，即仅拷贝对象本身，并不对所引用（所指的）内容进行拷贝，当对一个对象做改变的时候，另一个对象的相应属性也做同样的改变。 深复制： 对象，对象内部的引用均复制 ，即不仅拷贝对象，而且对象所引用地址的内容一块拷贝。改变一个对象的某个属性，并不影响另一个对象所引用的内容。 要想对一个对象进行复制，就需要对clone方法覆盖。 一般步骤是（浅复制）： 被复制的类需要实现Clonenable接口（不实现的话在调用clone方法会抛出CloneNotSupportedException异常) 该接口为标记接口(不含任何方法) 覆盖clone()方法，访问修饰符设为public。方法中调用super.clone()方法得到需要的复制对象， 浅复制123456789101112131415161718192021222324252627282930313233343536373839class Student implements Cloneable&#123; private int number; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; @Override public Object clone() &#123; Student stu = null; try&#123; stu = (Student)super.clone(); &#125;catch(CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return stu; &#125; &#125; public class Test &#123; public static void main(String args[]) &#123; Student stu1 = new Student(); stu1.setNumber(12345); Student stu2 = (Student)stu1.clone(); System.out.println(&quot;学生1:&quot; + stu1.getNumber()); System.out.println(&quot;学生2:&quot; + stu2.getNumber()); stu2.setNumber(54321); System.out.println(&quot;学生1:&quot; + stu1.getNumber()); System.out.println(&quot;学生2:&quot; + stu2.getNumber()); &#125; &#125; 打印结果： 1234学生1:12345 学生2:12345 学生1:12345 学生2:54321 深复制12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061class Address &#123; private String add; public String getAdd() &#123; return add; &#125; public void setAdd(String add) &#123; this.add = add; &#125; &#125; class Student implements Cloneable&#123; private int number; private Address addr; public Address getAddr() &#123; return addr; &#125; public void setAddr(Address addr) &#123; this.addr = addr; &#125; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; @Override public Object clone() &#123; Student stu = null; try&#123; stu = (Student)super.clone(); &#125;catch(CloneNotSupportedException e) &#123; e.printStackTrace(); &#125; return stu; &#125; &#125; public class Test &#123; public static void main(String args[]) &#123; Address addr = new Address(); addr.setAdd(&quot;杭州市&quot;); Student stu1 = new Student(); stu1.setNumber(123); stu1.setAddr(addr); Student stu2 = (Student)stu1.clone(); System.out.println(&quot;学生1:&quot; + stu1.getNumber() + &quot;,地址:&quot; + stu1.getAddr().getAdd()); System.out.println(&quot;学生2:&quot; + stu2.getNumber() + &quot;,地址:&quot; + stu2.getAddr().getAdd()); &#125; &#125; 打印结果： 1234学生1:123,地址:杭州市 学生2:123,地址:杭州市 学生1:123,地址:西湖区 学生2:123,地址:杭州市]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅析悲观锁和乐观锁]]></title>
    <url>%2F2018%2F05%2F21%2F%E6%B5%85%E6%9E%90%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81%2F</url>
    <content type="text"><![CDATA[引言 为什么需要锁（并发控制）？ 在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。这就是著名的并发性问题。 典型的冲突有： 丢失更新: 一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从6改为2，用户B把值从2改为6，则用户A丢失了他的更新。 脏读： 当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是6，用户B把值改为2，用户A读到的值仍为6。 为了解决这些并发带来的问题。 我们需要引入并发控制机制。 悲观锁(Pessimistic Lock) 假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。 乐观锁(Optimistic Lock) 假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁不能解决脏读的问题。 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。 优缺点两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。 悲观锁应用乐观锁应用1.使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。用下面的一张图来说明：如上图所示，如果更新操作顺序执行，则数据的版本（version）依次递增，不会产生冲突。但是如果发生有不同的业务操作对同一版本的数据进行修改，那么，先提交的操作（图中B）会把数据version更新为2，当A在B之后提交更新时发现数据的version已经被修改了，那么A的更新操作会失败。 2.乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。 结论在实际生产环境里边,如果并发量不大且不允许脏读，可以使用悲观锁解决并发问题；但如果系统的并发非常大的话,悲观锁定会带来非常大的性能问题,所以我们就要选择乐观锁定的方法.]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>线程</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis分页插件PageHelper的使用]]></title>
    <url>%2F2018%2F05%2F20%2FMyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2018%2F05%2F19%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Heading欢迎使用马克飞象@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式： $$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图[语法][3]以及时序图[语法][4]。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致橡树]]></title>
    <url>%2F2018%2F04%2F18%2F%E8%87%B4%E6%A9%A1%E6%A0%91%2F</url>
    <content type="text"><![CDATA[我如果爱你——绝不像攀援的凌霄花，借你的高枝炫耀自己；我如果爱你——绝不学痴情的鸟儿，为绿荫重复单调的歌曲；也不止像泉源，常年送来清凉的慰藉；也不止像险峰，增加你的高度，衬托你的威仪。甚至日光，甚至春雨。不，这些都还不够！我必须是你近旁的一株木棉，作为树的形象和你站在一起。根，紧握在地下；叶，相触在云里。每一阵风过，我们都互相致意，但没有人，听懂我们的言语。你有你的铜枝铁干，像刀，像剑，也像戟；我有我红硕的花朵，像沉重的叹息，又像英勇的火炬。我们分担寒潮、风雷、霹雳；我们共享雾霭、流岚、虹霓。仿佛永远分离，却又终身相依。这才是伟大的爱情，坚贞就在这里：爱——不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地。]]></content>
      <categories>
        <category>诗歌</category>
      </categories>
      <tags>
        <tag>现代诗</tag>
        <tag>朦胧诗</tag>
      </tags>
  </entry>
</search>
