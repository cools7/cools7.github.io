<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>和风浅挚</title>
  
  <subtitle>Problem In Chair,  Not In Computer.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-09T02:00:30.103Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>session解析</title>
    <link href="http://yoursite.com/2018/07/09/session%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/09/session解析/</id>
    <published>2018-07-09T01:52:42.000Z</published>
    <updated>2018-07-09T02:00:30.103Z</updated>
    
    <content type="html"><![CDATA[<p>session是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个完整的事务，能使网站变成一个真正意义上的软件。</p><a id="more"></a><p><strong>创建：</strong> sessionid第一次产生是在直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建。</p><p><strong>删除：</strong> 超时；程序调用HttpSession.invalidate()；程序关闭；</p><p><strong>session存放在哪里：</strong> 服务器端的内存中。不过session可以通过特殊的方式做持久化管理（memcache，redis）。</p><p><strong>session的id是从哪里来的，sessionID是如何使用的：</strong> 当客户端第一次请求session对象时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象</p><p><strong>session会因为浏览器的关闭而删除吗？</strong><br>不会，session只会通过上面提到的方式去关闭。</p><p><strong>下面是tomcat中session的创建：</strong><br>ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法：<br>（tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的），<br>StandardManager类是tomcat容器里默认的session管理实现类，<br>它会将session的信息存储到web容器所在服务器的内存里。<br>PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大，对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;session是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个完整的事务，能使网站变成一个真正意义上的软件。&lt;/p&gt;
    
    </summary>
    
      <category term="分类" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
      <category term="tag2" scheme="http://yoursite.com/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>Windows下写shell脚本到Linux下执行遇到的问题及解决方案</title>
    <link href="http://yoursite.com/2018/07/03/Windows%E4%B8%8B%E5%86%99shell%E8%84%9A%E6%9C%AC%E5%88%B0Linux%E4%B8%8B%E6%89%A7%E8%A1%8C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/07/03/Windows下写shell脚本到Linux下执行遇到的问题及解决方案/</id>
    <published>2018-07-03T12:10:44.000Z</published>
    <updated>2018-07-09T02:00:30.054Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows下写个Shell脚本再到Linux下执行，会出现权限不足和格式问题。<br><a id="more"></a><br>解决方案</p><blockquote><p>1、权限不足<br>进入lyn.sh文件的存放目录下，利用chmod 777 lyn.sh修改权限。</p><ol start="2"><li>执行过程中报错，并无法正确执行。<br>因为从Windows下到Linux中文件格式问题。<br>通过vi进入该文件，利用命令<code>:set ff</code>查看文件格式，得到结果<code>fileformat=dos</code>，利用命令<code>:set ff=unix</code>修改文件格式，修改成功后再次查看文件格式，形如：<code>fileformat=unix</code>，这次再执行就可以了。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows下写个Shell脚本再到Linux下执行，会出现权限不足和格式问题。&lt;br&gt;
    
    </summary>
    
      <category term="分类" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
      <category term="tag2" scheme="http://yoursite.com/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>基于JWT(Json Web Token)的授权方式</title>
    <link href="http://yoursite.com/2018/06/13/%E5%9F%BA%E4%BA%8EJWT-Json-Web-Token-%E7%9A%84%E6%8E%88%E6%9D%83%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/13/基于JWT-Json-Web-Token-的授权方式/</id>
    <published>2018-06-13T09:27:02.000Z</published>
    <updated>2018-06-13T09:31:53.460Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h4><blockquote><p>JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。</p></blockquote><p>JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。</p><a id="more"></a><blockquote><p>基于session的登录认证</p></blockquote><p>在传统的用户登录认证中，因为http是无状态的，所以都是采用session方式。用户登录成功，服务端会保证一个session，当然会给客户端一个sessionId，客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId。<br>cookie+session这种模式通常是保存在内存中，而且服务从单服务到多服务会面临的session共享问题，随着用户量的增多，开销就会越大。而JWT不是这样的，只需要服务端生成token，客户端保存这个token，每次请求携带这个token，服务端认证解析就可。</p><p>JWT生成Token后的样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJvcmciOiLku4rml6XlpLTmnaEiLCJuYW1lIjoiRnJlZeeggeWGnCIsImV4cCI6MTUxNDM1NjEwMywiaWF0IjoxNTE0MzU2MDQzLCJhZ2UiOiIyOCJ9.</span><br><span class="line">49UF72vSkj-sA4aHHiYN5eoZ9Nb4w5Vb45PsLF7x_NY</span><br></pre></td></tr></table></figure><blockquote><p>JWT的构成</p></blockquote><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload)，第三部分是签证（signature)。</p><ul><li>header</li></ul><p>jwt的头部承载两部分信息：</p><p>声明类型，这里是jwt</p><p>声明加密的算法 通常直接使用 HMAC SHA256</p><p>完整的头部就像下面这样的JSON：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line"></span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><ul><li>playload</li></ul><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><p>标准中注册的声明</p><p>公共的声明</p><p>私有的声明</p><p>标准中注册的声明 (建议但不强制使用) ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line"></span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line"></span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line"></span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line"></span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line"></span><br><span class="line">iat: jwt的签发时间</span><br><span class="line"></span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure><blockquote><p>公共的声明 ：</p></blockquote><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><blockquote><p>私有的声明 ：</p></blockquote><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;name&quot;:&quot;cool&quot;,</span><br><span class="line"></span><br><span class="line">&quot;age&quot;:&quot;28&quot;,</span><br><span class="line"></span><br><span class="line">&quot;org&quot;:&quot;讯飞快读&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到Jwt的第二部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJvcmciOiLku4rml6XlpLTmnaEiLCJuYW1lIjoiRnJlZeeggeWGnCIsImV4cCI6MTUxNDM1NjEwMywiaWF0IjoxNTE0MzU2MDQzLCJhZ2UiOiIyOCJ9</span><br></pre></td></tr></table></figure><ul><li>signature</li></ul><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header (base64后的)</span><br><span class="line"></span><br><span class="line">payload (base64后的)</span><br><span class="line"></span><br><span class="line">secret</span><br></pre></td></tr></table></figure><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">49UF72vSkj-sA4aHHiYN5eoZ9Nb4w5Vb45PsLF7x_NY</span><br></pre></td></tr></table></figure><p>密钥secret是保存在服务端的，服务端会根据这个密钥进行生成token和验证，所以需要保护好。</p><h4 id="java方式实现"><a href="#java方式实现" class="headerlink" title="java方式实现"></a>java方式实现</h4><ul><li>Maven</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>加密与校验代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class JwtToken &#123;</span><br><span class="line"></span><br><span class="line">    public static String SECRET = &quot;iflytek&quot;;</span><br><span class="line"></span><br><span class="line">    public static String createToken() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Date iatDate = new Date();</span><br><span class="line"></span><br><span class="line">        Calendar newTime = Calendar.getInstance();</span><br><span class="line">        newTime.add(Calendar.MINUTE, 60*3);</span><br><span class="line">        Date expiresDate = newTime.getTime();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;alg&quot;, &quot;HS256&quot;);</span><br><span class="line">        map.put(&quot;typ&quot;, &quot;JWT&quot;);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withHeader(map)</span><br><span class="line">                .withClaim(&quot;name&quot;, &quot;cool&quot;)</span><br><span class="line">                .withClaim(&quot;org&quot;, &quot;快读&quot;)</span><br><span class="line">                .withExpiresAt(expiresDate)</span><br><span class="line">                .withIssuedAt(iatDate)</span><br><span class="line">                .sign(Algorithm.HMAC256(SECRET));</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Map&lt;String, Claim&gt; verifyToken(String token) throws Exception &#123;</span><br><span class="line">        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class="line">        DecodedJWT jwt = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            jwt = verifier.verify(token);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;登录过期，请重新登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return jwt.getClaims();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        String token=JwtToken.createToken();</span><br><span class="line">        log.info(token);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Claim&gt; claimMap=JwtToken.verifyToken(token);</span><br><span class="line"></span><br><span class="line">        log.info(claimMap.get(&quot;name&quot;).asString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Claim&gt; sb=JwtToken.verifyToken(&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmciOiLlv6vor7siLCJuYW1lIjoiY29vbCIsImV4cCI6MTUyODk2NjYxNywiaWF0IjoxNTI4ODgwMjE3fQ.HiQkHzvrcWhOmbfZT4ba5kNf8ePLJiu673f8fKLxrPQ&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JWT总结</p></blockquote><p>1、因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</p><p>2、payload部分，JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</p><p>3、便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。它不需要在服务端保存会话信息, 所以它易于应用的扩展</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JWT简介&quot;&gt;&lt;a href=&quot;#JWT简介&quot; class=&quot;headerlink&quot; title=&quot;JWT简介&quot;&gt;&lt;/a&gt;JWT简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="鉴权" scheme="http://yoursite.com/tags/%E9%89%B4%E6%9D%83/"/>
    
      <category term="Token" scheme="http://yoursite.com/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/06/12/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/06/12/深拷贝与浅拷贝/</id>
    <published>2018-06-12T08:03:02.000Z</published>
    <updated>2018-06-13T07:57:00.277Z</updated>
    
    <content type="html"><![CDATA[<p>在java语言中，有几种方式可以创建对象呢？</p><p>1 使用new操作符创建一个对象<br>2 使用clone方法复制一个对象</p><a id="more"></a><p>那么这两种方式有什么相同和不同呢？ new操作符的本意是分配内存。程序执行到new操作符时， 首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。而clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p><h3 id="深复制和浅复制"><a href="#深复制和浅复制" class="headerlink" title="深复制和浅复制"></a>深复制和浅复制</h3><hr><p>[TOC]</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li><strong>浅复制：</strong>只复制一个对象，对象内部存在的指向其他对象数组或者引用则不复制，即仅拷贝对象本身，并不对所引用（所指的）内容进行拷贝，当对一个对象做改变的时候，另一个对象的相应属性也做同样的改变。</li><li><strong>深复制：</strong> 对象，对象内部的引用均复制 ，即不仅拷贝对象，而且对象所引用地址的内容一块拷贝。改变一个对象的某个属性，并不影响另一个对象所引用的内容。</li></ul><blockquote><p>要想对一个对象进行复制，就需要对clone方法覆盖。</p></blockquote><p>一般步骤是（浅复制）：</p><ol><li><p>被复制的类需要实现Clonenable接口（不实现的话在调用clone方法会抛出CloneNotSupportedException异常) 该接口为标记接口(不含任何方法)</p></li><li><p>覆盖clone()方法，访问修饰符设为public。方法中调用super.clone()方法得到需要的复制对象，</p></li></ol><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Cloneable&#123;  </span><br><span class="line">    private int number;  </span><br><span class="line">  </span><br><span class="line">    public int getNumber() &#123;  </span><br><span class="line">        return number;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setNumber(int number) &#123;  </span><br><span class="line">        this.number = number;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    @Override  </span><br><span class="line">    public Object clone() &#123;  </span><br><span class="line">        Student stu = null;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            stu = (Student)super.clone();  </span><br><span class="line">        &#125;catch(CloneNotSupportedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return stu;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">      </span><br><span class="line">    public static void main(String args[]) &#123;  </span><br><span class="line">          </span><br><span class="line">        Student stu1 = new Student();  </span><br><span class="line">        stu1.setNumber(12345);  </span><br><span class="line">        Student stu2 = (Student)stu1.clone();  </span><br><span class="line">          </span><br><span class="line">        System.out.println(&quot;学生1:&quot; + stu1.getNumber());  </span><br><span class="line">        System.out.println(&quot;学生2:&quot; + stu2.getNumber());  </span><br><span class="line">          </span><br><span class="line">        stu2.setNumber(54321);  </span><br><span class="line">      </span><br><span class="line">        System.out.println(&quot;学生1:&quot; + stu1.getNumber());  </span><br><span class="line">        System.out.println(&quot;学生2:&quot; + stu2.getNumber());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学生1:12345  </span><br><span class="line">学生2:12345  </span><br><span class="line">学生1:12345  </span><br><span class="line">学生2:54321</span><br></pre></td></tr></table></figure><h4 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Address  &#123;  </span><br><span class="line">    private String add;  </span><br><span class="line">  </span><br><span class="line">    public String getAdd() &#123;  </span><br><span class="line">        return add;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAdd(String add) &#123;  </span><br><span class="line">        this.add = add;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class Student implements Cloneable&#123;  </span><br><span class="line">    private int number;  </span><br><span class="line">  </span><br><span class="line">    private Address addr;  </span><br><span class="line">      </span><br><span class="line">    public Address getAddr() &#123;  </span><br><span class="line">        return addr;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setAddr(Address addr) &#123;  </span><br><span class="line">        this.addr = addr;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getNumber() &#123;  </span><br><span class="line">        return number;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setNumber(int number) &#123;  </span><br><span class="line">        this.number = number;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    @Override  </span><br><span class="line">    public Object clone() &#123;  </span><br><span class="line">        Student stu = null;  </span><br><span class="line">        try&#123;  </span><br><span class="line">            stu = (Student)super.clone();  </span><br><span class="line">        &#125;catch(CloneNotSupportedException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        return stu;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">      </span><br><span class="line">    public static void main(String args[]) &#123;  </span><br><span class="line">          </span><br><span class="line">        Address addr = new Address();  </span><br><span class="line">        addr.setAdd(&quot;杭州市&quot;);  </span><br><span class="line">        Student stu1 = new Student();  </span><br><span class="line">        stu1.setNumber(123);  </span><br><span class="line">        stu1.setAddr(addr);  </span><br><span class="line">          </span><br><span class="line">        Student stu2 = (Student)stu1.clone();  </span><br><span class="line">          </span><br><span class="line">        System.out.println(&quot;学生1:&quot; + stu1.getNumber() + &quot;,地址:&quot; + stu1.getAddr().getAdd());  </span><br><span class="line">        System.out.println(&quot;学生2:&quot; + stu2.getNumber() + &quot;,地址:&quot; + stu2.getAddr().getAdd());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学生1:123,地址:杭州市  </span><br><span class="line">学生2:123,地址:杭州市  </span><br><span class="line">学生1:123,地址:西湖区  </span><br><span class="line">学生2:123,地址:杭州市</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java语言中，有几种方式可以创建对象呢？&lt;/p&gt;
&lt;p&gt;1 使用new操作符创建一个对象&lt;br&gt;2 使用clone方法复制一个对象&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>浅析悲观锁和乐观锁</title>
    <link href="http://yoursite.com/2018/05/21/%E6%B5%85%E6%9E%90%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"/>
    <id>http://yoursite.com/2018/05/21/浅析悲观锁和乐观锁/</id>
    <published>2018-05-21T03:57:55.000Z</published>
    <updated>2018-07-09T01:55:46.560Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><blockquote><p>为什么需要锁（并发控制）？</p></blockquote><p>在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。这就是著名的并发性问题。</p><p>典型的冲突有：</p><ul><li><strong>丢失更新: </strong> 一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从6改为2，用户B把值从2改为6，则用户A丢失了他的更新。</li><li><strong>脏读：</strong> 当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是6，用户B把值改为2，用户A读到的值仍为6。</li></ul><a id="more"></a><blockquote><p>为了解决这些并发带来的问题。 我们需要引入并发控制机制。</p></blockquote><h4 id="悲观锁-Pessimistic-Lock"><a href="#悲观锁-Pessimistic-Lock" class="headerlink" title="悲观锁(Pessimistic Lock)"></a>悲观锁(Pessimistic Lock)</h4><blockquote><p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。</p></blockquote><p>顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</p><h4 id="乐观锁-Optimistic-Lock"><a href="#乐观锁-Optimistic-Lock" class="headerlink" title="乐观锁(Optimistic Lock)"></a>乐观锁(Optimistic Lock)</h4><blockquote><p>假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁不能解决脏读的问题。</p></blockquote><p>顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p><h4 id="悲观锁应用"><a href="#悲观锁应用" class="headerlink" title="悲观锁应用"></a>悲观锁应用</h4><h4 id="乐观锁应用"><a href="#乐观锁应用" class="headerlink" title="乐观锁应用"></a>乐观锁应用</h4><p>1.使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。用下面的一张图来说明：<br><img src="/images/2018-5-21/22a9518f-e355-315f-8d66-d91af4fda723.jpg" alt="Alt text"><br>如上图所示，如果更新操作顺序执行，则数据的版本（version）依次递增，不会产生冲突。但是如果发生有不同的业务操作对同一版本的数据进行修改，那么，先提交的操作（图中B）会把数据version更新为2，当A在B之后提交更新时发现数据的version已经被修改了，那么A的更新操作会失败。</p><p>2.乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>在实际生产环境里边,如果并发量不大且不允许脏读，可以使用悲观锁解决并发问题；但如果系统的并发非常大的话,悲观锁定会带来非常大的性能问题,所以我们就要选择乐观锁定的方法.</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;为什么需要锁（并发控制）？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。这就是著名的并发性问题。&lt;/p&gt;
&lt;p&gt;典型的冲突有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;丢失更新: &lt;/strong&gt; 一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从6改为2，用户B把值从2改为6，则用户A丢失了他的更新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脏读：&lt;/strong&gt; 当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是6，用户B把值改为2，用户A读到的值仍为6。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis分页插件PageHelper的使用</title>
    <link href="http://yoursite.com/2018/05/20/MyBatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/05/20/MyBatis分页插件PageHelper的使用/</id>
    <published>2018-05-20T04:18:02.000Z</published>
    <updated>2018-06-13T07:57:00.079Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      本文主要介绍
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="分页" scheme="http://yoursite.com/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2018/05/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/19/Hexo搭建个人博客/</id>
    <published>2018-05-19T15:29:50.000Z</published>
    <updated>2018-06-13T07:57:00.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h1><h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>以及时序图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong>[语法][3]以及<strong>时序图</strong>[语法][4]。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul>]]></content>
    
    <summary type="html">
    
      本文主要介绍我在搭建Hexo的时候遇到的问题和解决方法,搭建过程只是简单描述.
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>致橡树</title>
    <link href="http://yoursite.com/2018/04/18/%E8%87%B4%E6%A9%A1%E6%A0%91/"/>
    <id>http://yoursite.com/2018/04/18/致橡树/</id>
    <published>2018-04-18T04:39:04.000Z</published>
    <updated>2018-06-13T07:57:00.337Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4875084&auto=1&height=66"></iframe><a id="more"></a><p>我如果爱你——<br>绝不像攀援的凌霄花，<br>借你的高枝炫耀自己；<br>我如果爱你——<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉；<br>也不止像险峰，<br>增加你的高度，<br>衬托你的威仪。<br>甚至日光，<br>甚至春雨。<br>不，<br>这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，<br>紧握在地下；<br>叶，<br>相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，<br>像剑，<br>也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。<br>我们分担寒潮、<br>风雷、<br>霹雳；<br>我们共享雾霭、<br>流岚、<br>虹霓。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：<br>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=4875084&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="诗歌" scheme="http://yoursite.com/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
      <category term="现代诗" scheme="http://yoursite.com/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
      <category term="朦胧诗" scheme="http://yoursite.com/tags/%E6%9C%A6%E8%83%A7%E8%AF%97/"/>
    
  </entry>
  
</feed>
